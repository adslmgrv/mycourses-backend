// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package email

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockEmailSender creates a new instance of MockEmailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailSender {
	mock := &MockEmailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEmailSender is an autogenerated mock type for the EmailSender type
type MockEmailSender struct {
	mock.Mock
}

type MockEmailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailSender) EXPECT() *MockEmailSender_Expecter {
	return &MockEmailSender_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function for the type MockEmailSender
func (_mock *MockEmailSender) SendMessage(msg EmailMessage) error {
	ret := _mock.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(EmailMessage) error); ok {
		r0 = returnFunc(msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmailSender_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockEmailSender_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - msg EmailMessage
func (_e *MockEmailSender_Expecter) SendMessage(msg interface{}) *MockEmailSender_SendMessage_Call {
	return &MockEmailSender_SendMessage_Call{Call: _e.mock.On("SendMessage", msg)}
}

func (_c *MockEmailSender_SendMessage_Call) Run(run func(msg EmailMessage)) *MockEmailSender_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 EmailMessage
		if args[0] != nil {
			arg0 = args[0].(EmailMessage)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEmailSender_SendMessage_Call) Return(err error) *MockEmailSender_SendMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmailSender_SendMessage_Call) RunAndReturn(run func(msg EmailMessage) error) *MockEmailSender_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}
