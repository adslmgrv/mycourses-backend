// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/compendium-tech/compendium/user-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// FinishPasswordReset provides a mock function for the type MockAuthService
func (_mock *MockAuthService) FinishPasswordReset(ctx context.Context, request domain.FinishPasswordResetRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FinishPasswordReset")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FinishPasswordResetRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_FinishPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishPasswordReset'
type MockAuthService_FinishPasswordReset_Call struct {
	*mock.Call
}

// FinishPasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.FinishPasswordResetRequest
func (_e *MockAuthService_Expecter) FinishPasswordReset(ctx interface{}, request interface{}) *MockAuthService_FinishPasswordReset_Call {
	return &MockAuthService_FinishPasswordReset_Call{Call: _e.mock.On("FinishPasswordReset", ctx, request)}
}

func (_c *MockAuthService_FinishPasswordReset_Call) Run(run func(ctx context.Context, request domain.FinishPasswordResetRequest)) *MockAuthService_FinishPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FinishPasswordResetRequest
		if args[1] != nil {
			arg1 = args[1].(domain.FinishPasswordResetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_FinishPasswordReset_Call) Return(err error) *MockAuthService_FinishPasswordReset_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_FinishPasswordReset_Call) RunAndReturn(run func(ctx context.Context, request domain.FinishPasswordResetRequest) error) *MockAuthService_FinishPasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// InitPasswordReset provides a mock function for the type MockAuthService
func (_mock *MockAuthService) InitPasswordReset(ctx context.Context, request domain.InitPasswordResetRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for InitPasswordReset")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.InitPasswordResetRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_InitPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitPasswordReset'
type MockAuthService_InitPasswordReset_Call struct {
	*mock.Call
}

// InitPasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.InitPasswordResetRequest
func (_e *MockAuthService_Expecter) InitPasswordReset(ctx interface{}, request interface{}) *MockAuthService_InitPasswordReset_Call {
	return &MockAuthService_InitPasswordReset_Call{Call: _e.mock.On("InitPasswordReset", ctx, request)}
}

func (_c *MockAuthService_InitPasswordReset_Call) Run(run func(ctx context.Context, request domain.InitPasswordResetRequest)) *MockAuthService_InitPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.InitPasswordResetRequest
		if args[1] != nil {
			arg1 = args[1].(domain.InitPasswordResetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_InitPasswordReset_Call) Return(err error) *MockAuthService_InitPasswordReset_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_InitPasswordReset_Call) RunAndReturn(run func(ctx context.Context, request domain.InitPasswordResetRequest) error) *MockAuthService_InitPasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Logout(ctx context.Context, refreshToken string) error {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockAuthService_Expecter) Logout(ctx interface{}, refreshToken interface{}) *MockAuthService_Logout_Call {
	return &MockAuthService_Logout_Call{Call: _e.mock.On("Logout", ctx, refreshToken)}
}

func (_c *MockAuthService_Logout_Call) Run(run func(ctx context.Context, refreshToken string)) *MockAuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_Logout_Call) Return(err error) *MockAuthService_Logout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_Logout_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) error) *MockAuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Refresh(ctx context.Context, request domain.RefreshTokenRequest) (*domain.SessionResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *domain.SessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RefreshTokenRequest) (*domain.SessionResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RefreshTokenRequest) *domain.SessionResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.RefreshTokenRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockAuthService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.RefreshTokenRequest
func (_e *MockAuthService_Expecter) Refresh(ctx interface{}, request interface{}) *MockAuthService_Refresh_Call {
	return &MockAuthService_Refresh_Call{Call: _e.mock.On("Refresh", ctx, request)}
}

func (_c *MockAuthService_Refresh_Call) Run(run func(ctx context.Context, request domain.RefreshTokenRequest)) *MockAuthService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RefreshTokenRequest
		if args[1] != nil {
			arg1 = args[1].(domain.RefreshTokenRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_Refresh_Call) Return(sessionResponse *domain.SessionResponse, err error) *MockAuthService_Refresh_Call {
	_c.Call.Return(sessionResponse, err)
	return _c
}

func (_c *MockAuthService_Refresh_Call) RunAndReturn(run func(ctx context.Context, request domain.RefreshTokenRequest) (*domain.SessionResponse, error)) *MockAuthService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// SignIn provides a mock function for the type MockAuthService
func (_mock *MockAuthService) SignIn(ctx context.Context, request domain.SignInRequest) (*domain.SignInResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 *domain.SignInResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SignInRequest) (*domain.SignInResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SignInRequest) *domain.SignInResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SignInResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.SignInRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type MockAuthService_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.SignInRequest
func (_e *MockAuthService_Expecter) SignIn(ctx interface{}, request interface{}) *MockAuthService_SignIn_Call {
	return &MockAuthService_SignIn_Call{Call: _e.mock.On("SignIn", ctx, request)}
}

func (_c *MockAuthService_SignIn_Call) Run(run func(ctx context.Context, request domain.SignInRequest)) *MockAuthService_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SignInRequest
		if args[1] != nil {
			arg1 = args[1].(domain.SignInRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_SignIn_Call) Return(signInResponse *domain.SignInResponse, err error) *MockAuthService_SignIn_Call {
	_c.Call.Return(signInResponse, err)
	return _c
}

func (_c *MockAuthService_SignIn_Call) RunAndReturn(run func(ctx context.Context, request domain.SignInRequest) (*domain.SignInResponse, error)) *MockAuthService_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function for the type MockAuthService
func (_mock *MockAuthService) SignUp(ctx context.Context, request domain.SignUpRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SignUpRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockAuthService_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.SignUpRequest
func (_e *MockAuthService_Expecter) SignUp(ctx interface{}, request interface{}) *MockAuthService_SignUp_Call {
	return &MockAuthService_SignUp_Call{Call: _e.mock.On("SignUp", ctx, request)}
}

func (_c *MockAuthService_SignUp_Call) Run(run func(ctx context.Context, request domain.SignUpRequest)) *MockAuthService_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SignUpRequest
		if args[1] != nil {
			arg1 = args[1].(domain.SignUpRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_SignUp_Call) Return(err error) *MockAuthService_SignUp_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_SignUp_Call) RunAndReturn(run func(ctx context.Context, request domain.SignUpRequest) error) *MockAuthService_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitMfaOtp provides a mock function for the type MockAuthService
func (_mock *MockAuthService) SubmitMfaOtp(ctx context.Context, request domain.SubmitMfaOtpRequest) (*domain.SessionResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SubmitMfaOtp")
	}

	var r0 *domain.SessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SubmitMfaOtpRequest) (*domain.SessionResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SubmitMfaOtpRequest) *domain.SessionResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.SubmitMfaOtpRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_SubmitMfaOtp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitMfaOtp'
type MockAuthService_SubmitMfaOtp_Call struct {
	*mock.Call
}

// SubmitMfaOtp is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.SubmitMfaOtpRequest
func (_e *MockAuthService_Expecter) SubmitMfaOtp(ctx interface{}, request interface{}) *MockAuthService_SubmitMfaOtp_Call {
	return &MockAuthService_SubmitMfaOtp_Call{Call: _e.mock.On("SubmitMfaOtp", ctx, request)}
}

func (_c *MockAuthService_SubmitMfaOtp_Call) Run(run func(ctx context.Context, request domain.SubmitMfaOtpRequest)) *MockAuthService_SubmitMfaOtp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SubmitMfaOtpRequest
		if args[1] != nil {
			arg1 = args[1].(domain.SubmitMfaOtpRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_SubmitMfaOtp_Call) Return(sessionResponse *domain.SessionResponse, err error) *MockAuthService_SubmitMfaOtp_Call {
	_c.Call.Return(sessionResponse, err)
	return _c
}

func (_c *MockAuthService_SubmitMfaOtp_Call) RunAndReturn(run func(ctx context.Context, request domain.SubmitMfaOtpRequest) (*domain.SessionResponse, error)) *MockAuthService_SubmitMfaOtp_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetAccount provides a mock function for the type MockUserService
func (_mock *MockUserService) GetAccount(ctx context.Context) (*domain.AccountResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *domain.AccountResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*domain.AccountResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *domain.AccountResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AccountResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockUserService_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserService_Expecter) GetAccount(ctx interface{}) *MockUserService_GetAccount_Call {
	return &MockUserService_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx)}
}

func (_c *MockUserService_GetAccount_Call) Run(run func(ctx context.Context)) *MockUserService_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserService_GetAccount_Call) Return(accountResponse *domain.AccountResponse, err error) *MockUserService_GetAccount_Call {
	_c.Call.Return(accountResponse, err)
	return _c
}

func (_c *MockUserService_GetAccount_Call) RunAndReturn(run func(ctx context.Context) (*domain.AccountResponse, error)) *MockUserService_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function for the type MockUserService
func (_mock *MockUserService) UpdateAccount(ctx context.Context, request domain.UpdateAccount) (*domain.AccountResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 *domain.AccountResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateAccount) (*domain.AccountResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateAccount) *domain.AccountResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AccountResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UpdateAccount) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type MockUserService_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.UpdateAccount
func (_e *MockUserService_Expecter) UpdateAccount(ctx interface{}, request interface{}) *MockUserService_UpdateAccount_Call {
	return &MockUserService_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", ctx, request)}
}

func (_c *MockUserService_UpdateAccount_Call) Run(run func(ctx context.Context, request domain.UpdateAccount)) *MockUserService_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UpdateAccount
		if args[1] != nil {
			arg1 = args[1].(domain.UpdateAccount)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_UpdateAccount_Call) Return(accountResponse *domain.AccountResponse, err error) *MockUserService_UpdateAccount_Call {
	_c.Call.Return(accountResponse, err)
	return _c
}

func (_c *MockUserService_UpdateAccount_Call) RunAndReturn(run func(ctx context.Context, request domain.UpdateAccount) (*domain.AccountResponse, error)) *MockUserService_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}
