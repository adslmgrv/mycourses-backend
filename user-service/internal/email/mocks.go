// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package email

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockEmailSender creates a new instance of MockEmailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailSender {
	mock := &MockEmailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEmailSender is an autogenerated mock type for the EmailSender type
type MockEmailSender struct {
	mock.Mock
}

type MockEmailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailSender) EXPECT() *MockEmailSender_Expecter {
	return &MockEmailSender_Expecter{mock: &_m.Mock}
}

// SendPasswordResetMfaEmail provides a mock function for the type MockEmailSender
func (_mock *MockEmailSender) SendPasswordResetMfaEmail(to string, otp string) error {
	ret := _mock.Called(to, otp)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordResetMfaEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(to, otp)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmailSender_SendPasswordResetMfaEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPasswordResetMfaEmail'
type MockEmailSender_SendPasswordResetMfaEmail_Call struct {
	*mock.Call
}

// SendPasswordResetMfaEmail is a helper method to define mock.On call
//   - to string
//   - otp string
func (_e *MockEmailSender_Expecter) SendPasswordResetMfaEmail(to interface{}, otp interface{}) *MockEmailSender_SendPasswordResetMfaEmail_Call {
	return &MockEmailSender_SendPasswordResetMfaEmail_Call{Call: _e.mock.On("SendPasswordResetMfaEmail", to, otp)}
}

func (_c *MockEmailSender_SendPasswordResetMfaEmail_Call) Run(run func(to string, otp string)) *MockEmailSender_SendPasswordResetMfaEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEmailSender_SendPasswordResetMfaEmail_Call) Return(err error) *MockEmailSender_SendPasswordResetMfaEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmailSender_SendPasswordResetMfaEmail_Call) RunAndReturn(run func(to string, otp string) error) *MockEmailSender_SendPasswordResetMfaEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendSignInMfaEmail provides a mock function for the type MockEmailSender
func (_mock *MockEmailSender) SendSignInMfaEmail(to string, otp string) error {
	ret := _mock.Called(to, otp)

	if len(ret) == 0 {
		panic("no return value specified for SendSignInMfaEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(to, otp)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmailSender_SendSignInMfaEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSignInMfaEmail'
type MockEmailSender_SendSignInMfaEmail_Call struct {
	*mock.Call
}

// SendSignInMfaEmail is a helper method to define mock.On call
//   - to string
//   - otp string
func (_e *MockEmailSender_Expecter) SendSignInMfaEmail(to interface{}, otp interface{}) *MockEmailSender_SendSignInMfaEmail_Call {
	return &MockEmailSender_SendSignInMfaEmail_Call{Call: _e.mock.On("SendSignInMfaEmail", to, otp)}
}

func (_c *MockEmailSender_SendSignInMfaEmail_Call) Run(run func(to string, otp string)) *MockEmailSender_SendSignInMfaEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEmailSender_SendSignInMfaEmail_Call) Return(err error) *MockEmailSender_SendSignInMfaEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmailSender_SendSignInMfaEmail_Call) RunAndReturn(run func(to string, otp string) error) *MockEmailSender_SendSignInMfaEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendSignUpMfaEmail provides a mock function for the type MockEmailSender
func (_mock *MockEmailSender) SendSignUpMfaEmail(to string, otp string) error {
	ret := _mock.Called(to, otp)

	if len(ret) == 0 {
		panic("no return value specified for SendSignUpMfaEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(to, otp)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmailSender_SendSignUpMfaEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSignUpMfaEmail'
type MockEmailSender_SendSignUpMfaEmail_Call struct {
	*mock.Call
}

// SendSignUpMfaEmail is a helper method to define mock.On call
//   - to string
//   - otp string
func (_e *MockEmailSender_Expecter) SendSignUpMfaEmail(to interface{}, otp interface{}) *MockEmailSender_SendSignUpMfaEmail_Call {
	return &MockEmailSender_SendSignUpMfaEmail_Call{Call: _e.mock.On("SendSignUpMfaEmail", to, otp)}
}

func (_c *MockEmailSender_SendSignUpMfaEmail_Call) Run(run func(to string, otp string)) *MockEmailSender_SendSignUpMfaEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEmailSender_SendSignUpMfaEmail_Call) Return(err error) *MockEmailSender_SendSignUpMfaEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmailSender_SendSignUpMfaEmail_Call) RunAndReturn(run func(to string, otp string) error) *MockEmailSender_SendSignUpMfaEmail_Call {
	_c.Call.Return(run)
	return _c
}
