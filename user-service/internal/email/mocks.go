// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package email

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockMessageBuilder creates a new instance of MockMessageBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageBuilder {
	mock := &MockMessageBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageBuilder is an autogenerated mock type for the MessageBuilder type
type MockMessageBuilder struct {
	mock.Mock
}

type MockMessageBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageBuilder) EXPECT() *MockMessageBuilder_Expecter {
	return &MockMessageBuilder_Expecter{mock: &_m.Mock}
}

// BuildPasswordResetMfaEmailMessage provides a mock function for the type MockMessageBuilder
func (_mock *MockMessageBuilder) BuildPasswordResetMfaEmailMessage(to string, otp string) (Message, error) {
	ret := _mock.Called(to, otp)

	if len(ret) == 0 {
		panic("no return value specified for BuildPasswordResetMfaEmailMessage")
	}

	var r0 Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (Message, error)); ok {
		return returnFunc(to, otp)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) Message); ok {
		r0 = returnFunc(to, otp)
	} else {
		r0 = ret.Get(0).(Message)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(to, otp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildPasswordResetMfaEmailMessage'
type MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call struct {
	*mock.Call
}

// BuildPasswordResetMfaEmailMessage is a helper method to define mock.On call
//   - to string
//   - otp string
func (_e *MockMessageBuilder_Expecter) BuildPasswordResetMfaEmailMessage(to interface{}, otp interface{}) *MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call {
	return &MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call{Call: _e.mock.On("BuildPasswordResetMfaEmailMessage", to, otp)}
}

func (_c *MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call) Run(run func(to string, otp string)) *MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call) Return(message Message, err error) *MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call) RunAndReturn(run func(to string, otp string) (Message, error)) *MockMessageBuilder_BuildPasswordResetMfaEmailMessage_Call {
	_c.Call.Return(run)
	return _c
}

// BuildSignInMfaEmailMessage provides a mock function for the type MockMessageBuilder
func (_mock *MockMessageBuilder) BuildSignInMfaEmailMessage(to string, otp string) (Message, error) {
	ret := _mock.Called(to, otp)

	if len(ret) == 0 {
		panic("no return value specified for BuildSignInMfaEmailMessage")
	}

	var r0 Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (Message, error)); ok {
		return returnFunc(to, otp)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) Message); ok {
		r0 = returnFunc(to, otp)
	} else {
		r0 = ret.Get(0).(Message)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(to, otp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMessageBuilder_BuildSignInMfaEmailMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildSignInMfaEmailMessage'
type MockMessageBuilder_BuildSignInMfaEmailMessage_Call struct {
	*mock.Call
}

// BuildSignInMfaEmailMessage is a helper method to define mock.On call
//   - to string
//   - otp string
func (_e *MockMessageBuilder_Expecter) BuildSignInMfaEmailMessage(to interface{}, otp interface{}) *MockMessageBuilder_BuildSignInMfaEmailMessage_Call {
	return &MockMessageBuilder_BuildSignInMfaEmailMessage_Call{Call: _e.mock.On("BuildSignInMfaEmailMessage", to, otp)}
}

func (_c *MockMessageBuilder_BuildSignInMfaEmailMessage_Call) Run(run func(to string, otp string)) *MockMessageBuilder_BuildSignInMfaEmailMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMessageBuilder_BuildSignInMfaEmailMessage_Call) Return(message Message, err error) *MockMessageBuilder_BuildSignInMfaEmailMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockMessageBuilder_BuildSignInMfaEmailMessage_Call) RunAndReturn(run func(to string, otp string) (Message, error)) *MockMessageBuilder_BuildSignInMfaEmailMessage_Call {
	_c.Call.Return(run)
	return _c
}

// BuildSignUpMfaEmailMessage provides a mock function for the type MockMessageBuilder
func (_mock *MockMessageBuilder) BuildSignUpMfaEmailMessage(to string, otp string) (Message, error) {
	ret := _mock.Called(to, otp)

	if len(ret) == 0 {
		panic("no return value specified for BuildSignUpMfaEmailMessage")
	}

	var r0 Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (Message, error)); ok {
		return returnFunc(to, otp)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) Message); ok {
		r0 = returnFunc(to, otp)
	} else {
		r0 = ret.Get(0).(Message)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(to, otp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMessageBuilder_BuildSignUpMfaEmailMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildSignUpMfaEmailMessage'
type MockMessageBuilder_BuildSignUpMfaEmailMessage_Call struct {
	*mock.Call
}

// BuildSignUpMfaEmailMessage is a helper method to define mock.On call
//   - to string
//   - otp string
func (_e *MockMessageBuilder_Expecter) BuildSignUpMfaEmailMessage(to interface{}, otp interface{}) *MockMessageBuilder_BuildSignUpMfaEmailMessage_Call {
	return &MockMessageBuilder_BuildSignUpMfaEmailMessage_Call{Call: _e.mock.On("BuildSignUpMfaEmailMessage", to, otp)}
}

func (_c *MockMessageBuilder_BuildSignUpMfaEmailMessage_Call) Run(run func(to string, otp string)) *MockMessageBuilder_BuildSignUpMfaEmailMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMessageBuilder_BuildSignUpMfaEmailMessage_Call) Return(message Message, err error) *MockMessageBuilder_BuildSignUpMfaEmailMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockMessageBuilder_BuildSignUpMfaEmailMessage_Call) RunAndReturn(run func(to string, otp string) (Message, error)) *MockMessageBuilder_BuildSignUpMfaEmailMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSender creates a new instance of MockSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSender {
	mock := &MockSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSender is an autogenerated mock type for the Sender type
type MockSender struct {
	mock.Mock
}

type MockSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSender) EXPECT() *MockSender_Expecter {
	return &MockSender_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function for the type MockSender
func (_mock *MockSender) SendMessage(msg Message) error {
	ret := _mock.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Message) error); ok {
		r0 = returnFunc(msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSender_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockSender_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - msg Message
func (_e *MockSender_Expecter) SendMessage(msg interface{}) *MockSender_SendMessage_Call {
	return &MockSender_SendMessage_Call{Call: _e.mock.On("SendMessage", msg)}
}

func (_c *MockSender_SendMessage_Call) Run(run func(msg Message)) *MockSender_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Message
		if args[0] != nil {
			arg0 = args[0].(Message)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSender_SendMessage_Call) Return(err error) *MockSender_SendMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSender_SendMessage_Call) RunAndReturn(run func(msg Message) error) *MockSender_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}
