// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ua

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserAgentParser creates a new instance of MockUserAgentParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAgentParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAgentParser {
	mock := &MockUserAgentParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserAgentParser is an autogenerated mock type for the UserAgentParser type
type MockUserAgentParser struct {
	mock.Mock
}

type MockUserAgentParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserAgentParser) EXPECT() *MockUserAgentParser_Expecter {
	return &MockUserAgentParser_Expecter{mock: &_m.Mock}
}

// ParseUserAgent provides a mock function for the type MockUserAgentParser
func (_mock *MockUserAgentParser) ParseUserAgent(ua string) UserAgentInfo {
	ret := _mock.Called(ua)

	if len(ret) == 0 {
		panic("no return value specified for ParseUserAgent")
	}

	var r0 UserAgentInfo
	if returnFunc, ok := ret.Get(0).(func(string) UserAgentInfo); ok {
		r0 = returnFunc(ua)
	} else {
		r0 = ret.Get(0).(UserAgentInfo)
	}
	return r0
}

// MockUserAgentParser_ParseUserAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseUserAgent'
type MockUserAgentParser_ParseUserAgent_Call struct {
	*mock.Call
}

// ParseUserAgent is a helper method to define mock.On call
//   - ua string
func (_e *MockUserAgentParser_Expecter) ParseUserAgent(ua interface{}) *MockUserAgentParser_ParseUserAgent_Call {
	return &MockUserAgentParser_ParseUserAgent_Call{Call: _e.mock.On("ParseUserAgent", ua)}
}

func (_c *MockUserAgentParser_ParseUserAgent_Call) Run(run func(ua string)) *MockUserAgentParser_ParseUserAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAgentParser_ParseUserAgent_Call) Return(userAgentInfo UserAgentInfo) *MockUserAgentParser_ParseUserAgent_Call {
	_c.Call.Return(userAgentInfo)
	return _c
}

func (_c *MockUserAgentParser_ParseUserAgent_Call) RunAndReturn(run func(ua string) UserAgentInfo) *MockUserAgentParser_ParseUserAgent_Call {
	_c.Call.Return(run)
	return _c
}
