// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package interop

import (
	"context"

	"github.com/compendium-tech/compendium/subscription-service/internal/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetAccount provides a mock function for the type MockUserService
func (_mock *MockUserService) GetAccount(ctx context.Context, id uuid.UUID) (*domain.Account, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *domain.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Account, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Account); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockUserService_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUserService_Expecter) GetAccount(ctx interface{}, id interface{}) *MockUserService_GetAccount_Call {
	return &MockUserService_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, id)}
}

func (_c *MockUserService_GetAccount_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUserService_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_GetAccount_Call) Return(account *domain.Account, err error) *MockUserService_GetAccount_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockUserService_GetAccount_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.Account, error)) *MockUserService_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}
